apply plugin: "java"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "junit:junit:4.12"
}

sourceSets {
    annotations {
        java.srcDirs = ["src/annotations"]
        java.outputDir = file("${buildDir}/annotations")
    }
    main {
        java.srcDirs = ["src/main"]
        java.outputDir = file("${buildDir}/main")
        compileClasspath += sourceSets.annotations.output
    }
    examples {
        java.srcDirs = ["src/examples"]
        java.outputDir = file("${buildDir}/examples")
        compileClasspath += sourceSets.main.output
    }
    classes {
        java.srcDirs = ["src/classes"]
        java.outputDir = file("${buildDir}/classes")
        compileClasspath += sourceSets.main.output + sourceSets.annotations.output
    }
    peers {
        java.srcDirs = ["src/peers"]
        java.outputDir = file("${buildDir}/peers")
        compileClasspath += sourceSets.main.output + sourceSets.annotations.output
    }
    test {
        java.srcDirs = ["src/tests"]
        java.outputDir = file("${buildDir}/tests")
        compileClasspath += sourceSets.annotations.output + sourceSets.classes.output + sourceSets.peers.output
        runtimeClasspath += compileClasspath
    }
}

clean {
    group = "JPF Build"
}

test {
    group = "JPF Build"
    description = "Runs core regression tests."

    dependsOn jar

    enableAssertions = true
    forkEvery = 1

    maxHeapSize = "1024m"

    include "**/*Test.class"
    exclude "**/SplitInputStreamTest.class"
    exclude "**/JPF_*.class"

    // XXX Tests temporarily ignored because they are not fully supported in the Gradle build yet
    new File("failing-tests.txt").eachLine { failedTestClass ->
        def ignoredPath = "**/" + failedTestClass.replace(".", "/") + ".class"
        exclude ignoredPath
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

    afterSuite { testDescriptor, result ->
        if (!testDescriptor.parent) {
            println "Test Execution: ${result.resultType}"

            def summaryFields = ["${result.testCount} tests",
                                 "${result.successfulTestCount} passed",
                                 "${result.failedTestCount} failed",
                                 "${result.skippedTestCount} skipped"]

            println "Summary: " + summaryFields.join(", ")
        }
    }
}

task compile(type: Copy) {
    group = "JPF Build"
    description = "Compiles all JPF core sources."

    // These are automatic generated tasks from the Java Gradle Plugin.
    // Gradle is able to infer the ordering of the source sets
    // due to the compileClasspath attribute
    dependsOn compileTestJava, compileExamplesJava

    // Copies build.properties file to the build directory
    from "build.properties"
    into sourceSets.main.java.outputDir.path + "/gov/nasa/jpf"
}

task jpfClassesJar(type: Jar) {
    archiveName = "jpf-classes.jar"
    destinationDir = file("${buildDir}")

    description = "Creates the ${archiveName} file."
    group = "JPF Jars"

    dependsOn compileClassesJava, compileAnnotationsJava, compileJava

    from sourceSets.classes.java.outputDir
    from sourceSets.annotations.java.outputDir
    from(sourceSets.main.java.outputDir) {

        def classesToInclude = ["Verify", "JPFShell", "TypeRef", "TestJPF",
                                "TestMultiProcessJPF", "TestHelper"]

        classesToInclude.each { className ->
            include "**/" + className + ".class"
        }
    }
}

task jpfJar(type: Jar) {
    archiveName = "jpf.jar"
    destinationDir = file("${buildDir}")

    description = "Creates the ${archiveName} file."
    group = "JPF Jars"

    dependsOn compileClassesJava, compileAnnotationsJava, compileJava, compilePeersJava

    from sourceSets.main.java.outputDir
    from sourceSets.peers.java.outputDir
    from sourceSets.annotations.java.outputDir
    from(sourceSets.classes.java.outputDir) {
        include "org/junit/*.class"
    }

    manifest {
        attributes(
            "Built-By": "etc",
            "Implementation-Vendor": "NASA Ames Research Center",
            "Implementation-Title": "Java Pathfinder core system",
            "Implementation-Version": "1234"
        )
    }
}

task annotationsJar(type: Jar) {
    archiveName = "jpf-annotations.jpf"
    destinationDir = file("${buildDir}")

    description = "Creates the ${archiveName} file."
    group = "JPF Jars"

    dependsOn compileAnnotationsJava

    from sourceSets.annotations.java.outputDir
}

task classloaderSpecificTestsJar(type: Jar) {
    archiveName = "classloader_specific_tests.jar"
    destinationDir = file("${buildDir}")

    description = "Creates the ${archiveName} file."
    group = "JPF Jars"

    dependsOn compileTestJava

    from(sourceSets.test.java.outputDir) {
        include "classloader_specific_tests/*.class"
    }
}

jar {
    group = "JPF Build"
    description = "Generates the core JPF jar files."
    dependsOn jpfClassesJar, jpfJar, annotationsJar,
              classloaderSpecificTestsJar
}

defaultTasks "jar"
