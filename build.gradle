apply plugin: "java"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "junit:junit:4.12"
}

sourceSets {
    annotations {
        java.srcDirs = ["src/annotations"]
        java.outputDir = file("${buildDir}/annotations")
    }
    main {
        java.srcDirs = ["src/main"]
        java.outputDir = file("${buildDir}/main")
        compileClasspath += sourceSets.annotations.output
    }
    examples {
        java.srcDirs = ["src/examples"]
        java.outputDir = file("${buildDir}/examples")
        compileClasspath += sourceSets.main.output
    }
    classes {
        java.srcDirs = ["src/classes"]
        java.outputDir = file("${buildDir}/classes")
        compileClasspath += sourceSets.main.output + sourceSets.annotations.output
    }
    peers {
        java.srcDirs = ["src/peers"]
        java.outputDir = file("${buildDir}/peers")
        compileClasspath += sourceSets.main.output + sourceSets.annotations.output
    }
    test {
        java.srcDirs = ["src/tests"]
        java.outputDir = file("${buildDir}/tests")
        compileClasspath += sourceSets.annotations.output + sourceSets.classes.output + sourceSets.peers.output
    }
}

clean {
    group = "JPF Build"
}

test {
    group = "JPF Build"
    description = "Runs core regression tests."

    dependsOn jar

    enableAssertions = true
    forkEvery = 1

    maxHeapSize = "1024m"

    include "**/*Test.class"
    exclude "**/SplitInputStreamTest.class"
    exclude "**/JPF_*.class"

    // XXX Tests temporarily ignored because they are not fully supported in the Gradle build yet
    new File("failing-tests.txt").eachLine { failedTestClass ->
        def ignoredPath = "**/" + failedTestClass.replace(".", "/") + ".class"
        exclude ignoredPath
    }
}

task compile {
    group = "JPF Build"
    description = "Compiles all JPF core sources."

    // These are automatic generated tasks from the Java Gradle Plugin.
    // Gradle is able to infer the ordering of the source sets
    // due to the compileClasspath attribute
    dependsOn compileTestJava, compileExamplesJava
}

task jpfClassesJar(type: Jar) {
    archiveName = "jpf-classes.jar"
    destinationDir = file("${buildDir}")

    description = "Creates the ${archiveName} file."
    group = "JPF Jars"

    dependsOn compileClassesJava, compileAnnotationsJava, compileJava

    from sourceSets.classes.java.outputDir
    from sourceSets.annotations.java.outputDir
    from(sourceSets.main.java.outputDir) {

        def classesToInclude = ["Verify", "JPFShell", "TypeRef", "TestJPF",
                                "TestMultiProcessJPF", "TestHelper"]

        classesToInclude.each { className ->
            include "**/" + className + ".class"
        }
    }
}

jar {
    group = "JPF Build"
    description = "Generates the core JPF jar files."
    dependsOn jpfClassesJar
}

defaultTasks "jar"
